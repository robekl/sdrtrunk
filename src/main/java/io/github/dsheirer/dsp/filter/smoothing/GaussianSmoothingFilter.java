package io.github.dsheirer.dsp.filter.smoothing;

import java.util.HashMap;
import java.util.Map;

public class GaussianSmoothingFilter extends SmoothingFilter
{
	private static Map<Integer,double[]> mMap = new HashMap<>();

	static
	{
		mMap.put( 3, new double[] { 0.1842153217d,0.6315693566d,0.1842153217d } );
		mMap.put( 5, new double[] { 0.0646709835d,0.2446878423d,0.3812823483d,0.2446878423d,0.0646709835d } );
		mMap.put( 7, new double[] { 0.0355966134d,0.1103628062d,0.2176061504d,0.27286886d,0.2176061504d,0.1103628062d,0.0355966134d } );
		mMap.put( 9, new double[] { 0.0237625774d,0.061955345d,0.1228439993d,0.185233293d,0.2124095706d,0.185233293d,0.1228439993d,0.061955345d,0.0237625774d } );
		mMap.put( 11, new double[] { 0.0175873706d,0.040124091d,0.0762094006d,0.120506627d,0.1586398759d,0.1738652697d,0.1586398759d,0.120506627d,0.0762094006d,0.040124091d,0.0175873706d } );
		mMap.put( 13, new double[] { 0.0138646514d,0.0285342951d,0.0515030495d,0.0815279159d,0.1131845993d,0.137808478d,0.1471540217d,0.137808478d,0.1131845993d,0.0815279159d,0.0515030495d,0.0285342951d,0.0138646514d } );
		mMap.put( 15, new double[] { 0.011400054d,0.0216349783d,0.0372047506d,0.0579739252d,0.0818576722d,0.1047317717d,0.1214199044d,0.1275538873d,0.1214199044d,0.1047317717d,0.0818576722d,0.0579739252d,0.0372047506d,0.0216349783d,0.011400054d } );
		mMap.put( 17, new double[] { 0.0096581767d,0.0171732764d,0.0282802625d,0.0431306476d,0.0609201251d,0.07969074d,0.0965444243d,0.1083225312d,0.1125596326d,0.1083225312d,0.0965444243d,0.07969074d,0.0609201251d,0.0431306476d,0.0282802625d,0.0171732764d,0.0096581767d } );
		mMap.put( 19, new double[] { 0.0083665107d,0.0141035977d,0.0223580953d,0.0333318211d,0.0467307368d,0.0616120364d,0.0763919939d,0.0890736966d,0.097672084d,0.1007188551d,0.097672084d,0.0890736966d,0.0763919939d,0.0616120364d,0.0467307368d,0.0333318211d,0.0223580953d,0.0141035977d,0.0083665107d } );
		mMap.put( 21, new double[] { 0.0073728906d,0.0118884085d,0.0182292596d,0.0265811467d,0.0368585098d,0.0486027908d,0.0609458331d,0.0726751947d,0.0824114898d,0.0888686744d,0.091131604d,0.0888686744d,0.0824114898d,0.0726751947d,0.0609458331d,0.0486027908d,0.0368585098d,0.0265811467d,0.0182292596d,0.0118884085d,0.0073728906d } );
		mMap.put( 23, new double[] { 0.0065861356d,0.010228416d,0.0152327635d,0.0217541246d,0.0297918261d,0.0391241787d,0.0492703835d,0.0595003129d,0.0689041144d,0.0765180086d,0.0814844543d,0.0832105633d,0.0814844543d,0.0765180086d,0.0689041144d,0.0595003129d,0.0492703835d,0.0391241787d,0.0297918261d,0.0217541246d,0.0152327635d,0.010228416d,0.0065861356d } );
		mMap.put( 25, new double[] { 0.0059484873d,0.0089460248d,0.0129850288d,0.0181905149d,0.0245944051d,0.0320934871d,0.0404191102d,0.0491298959d,0.0576360481d,0.0652577058d,0.0713113508d,0.07520986d,0.076556162d,0.07520986d,0.0713113508d,0.0652577058d,0.0576360481d,0.0491298959d,0.0404191102d,0.0320934871d,0.0245944051d,0.0181905149d,0.0129850288d,0.0089460248d,0.0059484873d } );
		mMap.put( 27, new double[] { 0.0054216802d,0.007930248d,0.0112519401d,0.0154865908d,0.0206762609d,0.0267778655d,0.0336409056d,0.0409965368d,0.0484634619d,0.0555737199d,0.0618176187d,0.0667026128d,0.0698170011d,0.0708871156d,0.0698170011d,0.0667026128d,0.0618176187d,0.0555737199d,0.0484634619d,0.0409965368d,0.0336409056d,0.0267778655d,0.0206762609d,0.0154865908d,0.0112519401d,0.007930248d,0.0054216802d } );
		mMap.put( 29, new double[] { 0.0049794093d,0.0071086836d,0.0098843442d,0.013386093d,0.0176566017d,0.022683377d,0.0283828243d,0.0345900198d,0.0410575774d,0.0474660547d,0.0534466215d,0.0586144488d,0.0626089499d,0.0651351564d,0.0659996766d,0.0651351564d,0.0626089499d,0.0586144488d,0.0534466215d,0.0474660547d,0.0410575774d,0.0345900198d,0.0283828243d,0.022683377d,0.0176566017d,0.013386093d,0.0098843442d,0.0071086836d,0.0049794093d } );
		mMap.put( 31, new double[] { 0.0046030224d,0.0064323659d,0.0087836656d,0.0117208269d,0.0152833344d,0.0194740097d,0.0242476721d,0.0295027244d,0.0350777394d,0.0407547727d,0.0462703471d,0.0513339215d,0.0556523529d,0.0589576307d,0.0610342929d,0.0617426429d,0.0610342929d,0.0589576307d,0.0556523529d,0.0513339215d,0.0462703471d,0.0407547727d,0.0350777394d,0.0295027244d,0.0242476721d,0.0194740097d,0.0152833344d,0.0117208269d,0.0087836656d,0.0064323659d,0.0046030224d } );
	}
	
	public GaussianSmoothingFilter()
	{
		super( mMap, 3 );
	}

	@Override
	public SmoothingType getSmoothingType()
	{
		return SmoothingType.GAUSSIAN;
	}
}
